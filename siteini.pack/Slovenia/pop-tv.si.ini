**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: pop-tv.si
* @MinSWversion: 3.1
* @Revision 1 - [26/12/2020] Mat8861
* @Revision 0 - [29/11/2012] Jan van Straaten
*   - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=pop-tv.si|timezone=UTC|maxdays=7|cultureinfo=sl-SI|charset=UTF-8|titlematchfactor=90|nopageoverlaps}
*
urldate.format {datestring|yyyy-MM-dd}
url_index.headers {method=POST} 
url_index{url|https://gql.24ur.si/graphql/?raw}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
url_index.headers {contenttype=application/graphql}
url_index.headers {accept=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8}
url_index.headers {postdata={ epgDaily(key: "voyo-'urldate'") { date {full dayMonth day dataKey unixtime} allDates {full dayMonth day dataKey unixtime} channels { channel epg { id title url start end media {src} } } } }}
index_variable_element.modify{set|'config_site_id'}
index_showsplit.scrub {multi()|{"channel":"'index_variable_element'","epg":[|||}]}}
index_showsplit.modify {replace|\},\{|\}\|\{}
index_start.scrub {single|"start":||,"|,"}
*index_stop.scrub {single|"end":||,"|,"} *overlap
index_title.scrub {single|"title":"||",|",} 
index_title.modify {cleanup(tags="<"">")} 
index_temp_1.scrub {single|"id":||,"|,"}
index_urlshow.modify {addstart('index_temp_1' not "")|https://gql.24ur.si/graphql/?raw}
index_urlshow.headers {method=POST} 
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate,br}
index_urlshow.headers {contenttype=application/graphql}
index_urlshow.headers {postdata={ epgItem(id: 'index_temp_1') { id eventId channel tvDay start end title originalTitle url onVoyo description actors directors director certification cast voices countries season episode genreName externalLink length startChunk endChunk media { id src } } }}
title.scrub {single|"title":"||",|",} 
titleoriginal.scrub {single|"originalTitle":"||",|",}
titleoriginal.modify{clear('title')}
description.scrub {single|"description":"||",|",}
director.scrub {single|"director":"||",|",}
actor.scrub {single(separator=", ")|"actors":"||",|",}
showicon.scrub{single|"src":"||"|"}
showicon.modify{remove(type=regex)|\?v=.*?$}
country.scrub{"countries":"||",|",}
category.scrub {single(separator=", " max=2)|"genreName":"||",|",}
temp_1.scrub{regex||"episode":([1-9]*),||}
temp_1.modify{addstart(not "")|E}
episode.scrub {regex(pattern="S'S1' E'E1'""S'S1'""E'E1'")||"season":([1-9]*),||}
episode.modify{addstart(not "")|S}
episode.modify{addend(not "")|'temp_1'}
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index.headers {method=POST} 
*url_index{url|https://gql.24ur.si/graphql/?raw}
*url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
*url_index.headers {contenttype=application/graphql}
*url_index.headers {accept=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8}
*url_index.headers {postdata={ epgDaily(key: "voyo-'urldate'") { date {full dayMonth day dataKey unixtime} allDates {full dayMonth day dataKey unixtime} channels { channel epg { id title url start end media {src} } } } }}
*index_site_channel.scrub {multi|{"channel":"||","||","}
*index_site_id.scrub {multi|{"channel":"||","||","}
*scope.range {(channellist)|end}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
